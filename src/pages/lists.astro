---
import Layout from '../layouts/MainLayout.astro';

import { getLangFromUrl, useTranslations} from '../i18n/utils';
import MainNavigation from '../components/MainNavigation.astro';
//import { getLoginSession } from 'lucia-auth';
import { db, Lists, User, eq } from 'astro:db';

// Get the language from the URL for translations
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Get the user from the session
const user = Astro.locals.user;

// Get the lists from the database
const lists = await db.select().from(Lists).where(eq(Lists.userId, user.id));


// Insert Data into the Lists table
if (Astro.request.method === 'POST') {
	const formData = await Astro.request.formData();
	const name = formData.get('name');
	const description = formData.get('description');

	if (typeof name === 'string' && typeof description === 'string') {
		// insert form data into the Lists table
		try {
			await db.insert(Lists).values({ name, description, userId: user.id });
		} catch (error) {
			console.log('Error inserting into database:', error);
		}
	}
}
---


<Layout title="Welcome to Astro.">
	<main>
		<MainNavigation/>
		
		<h1>{t('title.home')} <span class="text-gradient">Astro</span> </h1>

		<h2>Listas:</h2>
		
		<div id="list-container">
			{lists.map(({ name, description }) => (
			  <article>
				<p>Name: {name}</p>
				<p>Descripcion: {description}</p>
			  </article>
			))}
		</div>

		<h2>Creacion de listas:</h2>

		<form method="POST" id="formLists" enctype="multipart/form-data" style="display: grid">
			<label for="name">Name</label>
			<input id="name" name="name" />
		  
			<label for="description">Description</label>
			<textarea id="description" name="description"></textarea>
		  
			<button type="submit">Crear lista</button>
		</form>



		<script type="module">
			// Client-side JavaScript to handle adding new list items
			form.addEventListener('submit', async (event) => {
				event.preventDefault();

				const formData = new FormData(form);
				const name = formData.get('name');
				const description = formData.get('description');

				// Send a request to the server to add the new list item to the database
				const response = await fetch('/', {
					method: 'POST',
					body: formData,
				});

				if (response.ok) {
					// If the server request was successful, reset the form
					form.reset();

					// Fetch the latest data from the server and update the DOM
					const latestData = await fetch('/lists');
					const latestDataJson = await latestData.json();

					// Clear the list container
					listContainer.innerHTML = '';

					// Add the latest data to the DOM
					latestDataJson.forEach(item => {
					const newItem = document.createElement('article');
					newItem.innerHTML = `
						<p>Name: ${item.name}</p>
						<p>Description: ${item.description}</p>
					`;
					listContainer.appendChild(newItem);
					});
				} else {
					// If the server request failed, show an error message
					alert('Error adding new list item');
				}
			});
		</script>


	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
</style>
